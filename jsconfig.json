{
  "compilerOptions": {
    "moduleResolution": "Node", // Possible values: "Node", "Node16", "NodeNext"
    "target": "ESNext", // default value is "ES3"
    "module": "ESNext",
    "jsx": "react-jsx", // You previously used react, but since upgrading from vite 3 to vite 4, you need to use the react-jsx option to solve the error of "'React' refers to a UMD global, but the current file is a module. Consider adding an import instead. ts(2686)"
    "importsNotUsedAsValues": "error",
    "ignoreDeprecations": "5.0",
    "isolatedModules": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "forceConsistentCasingInFileNames": true,
    "lib": ["ES2022", "DOM"], // adding the "DOM" library helps vs-code to recognize the window & document objects.
    "checkJs": true, // without it? this config file would not apply to js/jsx files.
    "sourceMap": true, // default value is false
    "noImplicitOverride": true, // If you use inheritance, and you provide an override function, you must specify that it is an override function.
    "baseUrl": "./",
    "allowSyntheticDefaultImports": true,
    // "outDir": "./dist", // no need to have this! all the microservices are being used just as they are, and the only thing being bundled is the app-frontend, which gets bundled using vite, which already has an outDir set in its config file.
    "paths": {},
    "typeRoots": ["node_modules/@types", "src/types"]
  },
  "compileOnSave": true,
  "exclude": ["node_modules", "<node_internals>/**", "bin/**"],
  "include": [
    "**/*/*.ts",
    "**/*.d.ts",
    "**/*.js",
    "**/*.jsx",
    "**/*.cjs",
    "*.ts",
    "*.d.ts",
    "*.js",
    "*.jsx",
    "*.cjs",
    ".prettierrc.js"
  ]
}
